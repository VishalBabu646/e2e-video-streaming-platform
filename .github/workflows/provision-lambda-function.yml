name: Deploy Lambda with FFmpeg Layer

on:
  workflow_dispatch:
    inputs:
      sqs_arn:
        description: 'ARN of the SQS queue to trigger the Lambda function'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1
  FUNCTION_NAME: my-layered-function
  LAYER_NAME: my-ffmpeg-layer
  LAYER_ZIP_PATH: worker/ffmpeg-layer/lambda-ffmpeg-layer.zip
  SRC_DIR: worker/lambda-code
  ROLE_NAME: lambda-execution-role

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure Lambda execution role
      run: |
        set -e
        ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${ROLE_NAME}"

        if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
          echo "Role $ROLE_NAME already exists. Deleting..."
          aws iam detach-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
          aws iam delete-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-name sqs-s3-access || true
          aws iam delete-role --role-name "$ROLE_NAME"
          echo "Waiting for IAM role deletion to propagate..."
          sleep 10
        fi

        echo "Creating IAM role $ROLE_NAME..."
        TRUST_POLICY='{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }'
        echo "$TRUST_POLICY" > trust-policy.json

        aws iam create-role \
          --role-name "$ROLE_NAME" \
          --assume-role-policy-document file://trust-policy.json

        echo "Attaching AWSLambdaBasicExecutionRole policy..."
        aws iam attach-role-policy \
          --role-name "$ROLE_NAME" \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

        echo "Attaching inline policy for SQS and S3 access..."
        cat > sqs-s3-policy.json <<EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": "*"
            }
          ]
        }
        EOF

        aws iam put-role-policy \
          --role-name "$ROLE_NAME" \
          --policy-name sqs-s3-access \
          --policy-document file://sqs-s3-policy.json

        echo "Waiting for IAM role to propagate..."
        sleep 15

    # 1. Zip the Lambda function code
    - name: Package Lambda function
      run: |
        cd $SRC_DIR
        zip -r ../function.zip .
        cd ..
        mv function.zip ../function.zip
        cd ..

    # 2. Publish the Lambda Layer
    - name: Publish Lambda layer
      id: publish_layer
      run: |
        LAYER_VERSION=$(aws lambda publish-layer-version \
          --layer-name $LAYER_NAME \
          --zip-file fileb://$LAYER_ZIP_PATH \
          --compatible-runtimes nodejs20.x \
          --query Version --output text)
        echo "layer_version=$LAYER_VERSION" >> $GITHUB_ENV

    # 3. Create or update the Lambda function
    - name: Create or update Lambda
      run: |
        SQS_ARN="${{ github.event.inputs.sqs_arn }}"
        if [ -z "$SQS_ARN" ]; then
          echo "Error: SQS ARN not provided. Please provide sqs_arn as workflow input."
          exit 1
        fi

        if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
          echo "Updating Lambda function..."
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://function.zip

          echo "Waiting for function to be Active..."
          while true; do
            STATUS=$(aws lambda get-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --query 'LastUpdateStatus' --output text)
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Lambda update complete."
              break
            else
              echo "Still updating... ($STATUS)"
              sleep 5
            fi
          done

          echo "Updating Lambda configuration..."
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --layers arn:aws:lambda:${AWS_REGION}:${{ secrets.AWS_ACCOUNT_ID }}:layer:${LAYER_NAME}:${layer_version} \
            --timeout 600 \
            --memory-size 2048 \
            --ephemeral-storage '{"Size":2048}'
        else
          echo "Creating Lambda function..."
          aws lambda create-function \
            --function-name "$FUNCTION_NAME" \
            --runtime nodejs20.x \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
            --handler index.handler \
            --zip-file fileb://function.zip \
            --layers arn:aws:lambda:${AWS_REGION}:${{ secrets.AWS_ACCOUNT_ID }}:layer:${LAYER_NAME}:${layer_version} \
            --timeout 600 \
            --memory-size 2048 \
            --ephemeral-storage '{"Size":2048}'
        fi

    - name: Add or update SQS trigger
      run: |
        SQS_ARN="${{ github.event.inputs.sqs_arn }}"
        FUNCTION="$FUNCTION_NAME"

        # Get any existing event source mapping UUID for this Lambda + SQS
        MAPPING_UUID=$(aws lambda list-event-source-mappings \
          --function-name "$FUNCTION" \
          --event-source-arn "$SQS_ARN" \
          --query 'EventSourceMappings[0].UUID' \
          --output text)

        if [ "$MAPPING_UUID" != "None" ] && [ -n "$MAPPING_UUID" ]; then
          echo "Updating existing SQS trigger mapping: $MAPPING_UUID"
          aws lambda update-event-source-mapping \
            --uuid "$MAPPING_UUID" \
            --batch-size 1 \
            --enabled
        else
          echo "Creating new SQS trigger mapping..."
          aws lambda create-event-source-mapping \
            --function-name "$FUNCTION" \
            --event-source-arn "$SQS_ARN" \
            --batch-size 1 \
            --enabled
        fi
